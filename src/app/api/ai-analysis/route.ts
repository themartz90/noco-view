import { NextResponse } from 'next/server';

const NOCODB_URL = 'http://192.168.50.191:33860';
const TABLE_ID = 'm1w6ly4p8iu64s9'; // AI_Analyses table
const API_KEY = 'LehBM_s0bzNbhywtVYr_egxfe4AM3h75yLulZif3';

// GET: Fetch analysis by period_key
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const periodKey = searchParams.get('period_key');

    if (!periodKey) {
      return NextResponse.json({ error: 'period_key is required' }, { status: 400 });
    }

    // Query NocoDB for matching period_key
    const response = await fetch(
      `${NOCODB_URL}/api/v2/tables/${TABLE_ID}/records?where=(period_key,eq,${encodeURIComponent(periodKey)})&sort=-CreatedAt&limit=1`,
      {
        headers: {
          'xc-token': API_KEY,
        },
        cache: 'no-store',
      }
    );

    if (!response.ok) {
      throw new Error(`NocoDB API error: ${response.status}`);
    }

    const data = await response.json();

    if (data.list && data.list.length > 0) {
      const record = data.list[0];
      return NextResponse.json({
        found: true,
        analysis: JSON.parse(record.analysis_json),
        usage: record.tokens_used ? { total_tokens: record.tokens_used } : null,
        created_at: record.CreatedAt,
      });
    }

    return NextResponse.json({ found: false });
  } catch (error) {
    console.error('AI Analysis fetch error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch AI analysis' },
      { status: 500 }
    );
  }
}

// POST: Save new analysis
export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { period_key, analysis, usage } = body;

    if (!period_key || !analysis) {
      return NextResponse.json(
        { error: 'period_key and analysis are required' },
        { status: 400 }
      );
    }

    // Save to NocoDB (CreatedAt is auto-generated by NocoDB)
    const response = await fetch(
      `${NOCODB_URL}/api/v2/tables/${TABLE_ID}/records`,
      {
        method: 'POST',
        headers: {
          'xc-token': API_KEY,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          period_key,
          analysis_json: JSON.stringify(analysis),
          tokens_used: usage?.total_tokens || null,
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('NocoDB save error:', errorText);
      throw new Error(`NocoDB API error: ${response.status}`);
    }

    const result = await response.json();
    return NextResponse.json({ success: true, id: result.Id });
  } catch (error) {
    console.error('AI Analysis save error:', error);
    return NextResponse.json(
      { error: 'Failed to save AI analysis' },
      { status: 500 }
    );
  }
}
